quarkus.log.console.format=%d{HH:mm:ss} %-5p [%c{2.}] (%t) %s%e%n
quarkus.log.console.level=INFO
quarkus.native.additional-build-args =-H:ResourceConfigurationFiles=.*\.json
quarkus.native.resources.includes=transportations.json
quarkus.swagger-ui.always-include=true
quarkus.http.cors=true
quarkus.http.port=8080
# When deploying as openshift app using s2i for example
quarkus.openshift.expose=true
quarkus.container-image.group=vaccine
quarkus.container-image.registry=image-registry.openshift-image-registry.svc:5000
quarkus.openshift.labels.app=vaccinetransport


quarkus.openshift.env.configmaps=vaccine-transport-cm
quarkus.openshift.env.secrets=vaccine-transport-secrets
# for scram remote connection
quarkus.openshift.env.mapping.KAFKA_PASSWORD.from-secret=${KAFKA_USER}
quarkus.openshift.env.mapping.KAFKA_PASSWORD.with-key=password
quarkus.openshift.env.mapping.KAFKA_SSL_TRUSTSTORE_PASSWORD.from-secret=gse-eda-dev-cluster-ca-cert
quarkus.openshift.env.mapping.KAFKA_SSL_TRUSTSTORE_PASSWORD.with-key=ca.password
quarkus.openshift.mounts.es-cert.path=/deployments/certs/server
quarkus.openshift.secret-volumes.es-cert.secret-name=gse-eda-dev-cluster-ca-cert

# Kafka producer
kafka.ssl.trustore.location=/deployments/certs/server/ca.p12
kafka.sasl.jaas.config=org.apache.kafka.common.security.scram.ScramLoginModule required username=${KAFKA_USER} password=${KAFKA_PASSWORD};
kafka.key.serializer=org.apache.kafka.common.serialization.StringSerializer
kafka.value.serializer=com.ibm.eventstreams.serdes.EventStreamsSerializer
kafka.schema.registry.url=${KAFKA_SCHEMA_REGISTRY_URL}

# When smalltye will work
# mp.messaging.outgoing.transportations.connector=smallrye-kafka
# mp.messaging.outgoing.transportations.topic=${TRANSPORTATION_TOPIC:vaccine-transportation}
# mp.messaging.outgoing.transportations.key.serializer=org.apache.kafka.common.serialization.StringSerializer
# mp.messaging.outgoing.transportations.value.serializer=io.confluent.kafka.serializers.KafkaAvroSerializer
# io.quarkus.kafka.client.serialization.JsonbSerializer
# mp.messaging.connector.smallrye-kafka.schema.registry.url=${SCHEMA_REGISTRY_URL}
# mp.messaging.connector.smallrye-kafka.schema.registry.ssl.trustore.location=${KAFKA_SSL_TRUSTSTORE_LOCATION}
# mp.messaging.connector.smallrye-kafka.schema.registry.api.skip.ssl.validation=${KAFKA_SSL_TRUSTSTORE_PASSWORD}