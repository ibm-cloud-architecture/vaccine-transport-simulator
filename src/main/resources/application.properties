quarkus.log.console.format=%d{HH:mm:ss} %-5p [%c{2.}] (%t) %s%e%n
quarkus.log.console.level=INFO
quarkus.native.additional-build-args =-H:ResourceConfigurationFiles=.*\.json
quarkus.native.resources.includes=transportations.json
quarkus.swagger-ui.always-include=true
quarkus.http.cors=true
quarkus.http.port=8080

#################################
# Source to Image to openshift 
quarkus.openshift.expose=true
quarkus.container-image.group=ibmcase
quarkus.container-image.registry=image-registry.openshift-image-registry.svc:5000
quarkus.openshift.labels.app=vaccinetransport
quarkus.openshift.env.configmaps=vaccine-transport-cm
quarkus.openshift.env.secrets=vaccine-transport-secrets

# Define properties for yaml files generation
# Cluster certificate
quarkus.openshift.env.mapping.KAFKA_SSL_TRUSTSTORE_PASSWORD.from-secret=${KAFKA_CA_CERT_NAME:kafka-cluster-ca-cert}
quarkus.openshift.env.mapping.KAFKA_SSL_TRUSTSTORE_PASSWORD.with-key=ca.password
quarkus.openshift.env.mapping.KAFKA_SCRAM_PWD.from-secret=${KAFKA_USER:scram-user}
quarkus.openshift.env.mapping.KAFKA_SCRAM_PWD.with-key=password
quarkus.openshift.mounts.kafka-cert.path=/deployments/certs/server
quarkus.openshift.secret-volumes.kafka-cert.secret-name=${KAFKA_CA_CERT_NAME:kafka-cluster-ca-cert}


#################################
# Kafka producer - as we use schema we need scram to connect to the schema registry
# so in this case to simplify the configuration we can use scram to connect to brokers
%prod.kafka.ssl.truststore.location=/deployments/certs/server/ca.p12
%prod.kafka.ssl.truststore.type=PKCS12
# use following lines if you insist to use tls authentication to connect to brokers
#%prod.kafka.ssl.keystore.location=/deployments/certs/user/user.p12
#%prod.kafka.ssl.keystore.type=PKCS12
#%prod.kafka.security.protocol=SSL
kafka.security.protocol=SASL_SSL
kafka.sasl.mechanism=SCRAM-SHA-512
%staging.kafka.sasl.jaas.config=org.apache.kafka.common.security.scram.ScramLoginModule required username\=\"${KAFKA_USER}\" password\=\"${KAFKA_PASSWORD}\";
%staging.kafka.sasl.mechanism=SCRAM-SHA-512
%staging.kafka.ssl.truststore.location=${PWD}/certs/es-cert.p12
%staging.kafka.ssl.truststore.password=${KAFKA_SSL_TRUSTSTORE_PASSWORD}
kafka.ssl.protocol=TLSv1.2

kafka.topic.name=${TRANSPORTATION_TOPIC:vaccine.transportation}
kafka.key.serializer=org.apache.kafka.common.serialization.StringSerializer
kafka.value.serializer=com.ibm.eventstreams.serdes.EventStreamsSerializer
kafka.schema.registry.url=${SCHEMA_REGISTRY_URL}
schema.name=Transportation
schema.version=1.0.0

# mp.messaging.outgoing.transportations.connector=smallrye-kafka
# mp.messaging.outgoing.transportations.topic=${TRANSPORTATION_TOPIC:vaccine.transportation}
# mp.messaging.outgoing.transportations.key.serializer=org.apache.kafka.common.serialization.StringSerializer
# mp.messaging.outgoing.transportations.value.serializer=com.ibm.eventstreams.serdes.EventStreamsSerializer
# mp.messaging.connector.smallrye-kafka.schema.registry.url=${SCHEMA_REGISTRY_URL}
# mp.messaging.connector.smallrye-kafka.schema.registry.ssl.trustore.location=/deployments/certs/server/ca.p12
# mp.messaging.connector.smallrye-kafka.schema.registry.api.skip.ssl.validation=true